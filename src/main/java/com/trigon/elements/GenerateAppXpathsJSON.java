package com.trigon.elements;

import com.trigon.reports.ReportManager;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;


public class GenerateAppXpathsJSON extends ReportManager {

    private static final Logger logger = LogManager.getLogger(GenerateAppXpathsJSON.class);

    public void generateNewJSON() {
        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("AuthorName", "Autogenerated JSON File");
            jsonObject.put("pageTitle", "New Autogen Android Page");
            JSONObject elements = new JSONObject();

            Set<String> xpathSet = scrapeXpathsForAndroid();
            List<String> xpaths = xpathSet.stream().collect(Collectors.toList());
            Map<String, List<String>> neighbouringXpaths = new LinkedHashMap<>();
            String beforeXpath = null, afterXpath = null;

            //generate before and after xpaths for each xpath
            if(xpaths.size()>1) {
                for (int i = 0; i <= xpaths.size() - 1; i++) {
                    List<String> beforeAfter = new ArrayList<>();
                    if (i == 0) {
                        beforeXpath = "";
                        afterXpath = xpaths.get(i + 1);

                    } else if (i == xpaths.size() - 1) {
                        beforeXpath = xpaths.get(i - 1);
                        afterXpath = "";
                    } else {
                        beforeXpath = xpaths.get(i - 1);
                        afterXpath = xpaths.get(i + 1);
                    }
                    beforeAfter.add(beforeXpath);
                    beforeAfter.add(afterXpath);
                    neighbouringXpaths.put(xpaths.get(i), beforeAfter);
                }
            }else if(xpaths.size()==1){
                beforeXpath="";
                afterXpath="";
                List<String> beforeAfter = new ArrayList<>();
                beforeAfter.add(beforeXpath);
                beforeAfter.add(afterXpath);
                neighbouringXpaths.put(xpaths.get(0), beforeAfter);
            }

            for (String xpath : xpaths) {
                JSONObject element = new JSONObject();
                element.put("Web", "");
                element.put("Android", "xpath="+xpath);
                element.put("IOS", "");
                element.put("action", "click,clearText,enterText,getText,getAttribute,isEnabled,verifyDisplayed,isSelected,isPresent,isNotPresent,isNotDisplayed");
                element.put("App_beforeElement", neighbouringXpaths.get(xpath).get(0));
                element.put("App_afterElement", neighbouringXpaths.get(xpath).get(1));
                String finalName = "";
                List<String> nameSplit = Arrays.stream(StringUtils.substringBetween(xpath, "='", "'").replaceAll("[^A-Za-z0-9]", " ").trim().split(" ")).collect(Collectors.toList());
                for (String name : nameSplit) {
                    if (name.equals("")) {
                        continue;
                    } else {
                        name = name.substring(0, 1).toUpperCase() + name.substring(1);
                        finalName = finalName.concat(name);
                    }
                }
                if(!finalName.equals(""))
                {
                    elements.put(finalName, element);
                }
            }

            jsonObject.put("elements", elements);
            System.out.println(jsonObject.toString(4));
            try (PrintWriter out = new PrintWriter(new FileWriter("src/test/resources/ElementRepositories/NewAutoGen.json"))) {
                out.write(jsonObject.toString(4));
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            captureException(e);
        }
    }

    protected Set<String> scrapeXpathsForAndroid() {
        List<WebElement> elements = android().findElements(By.xpath("//*"));
        Set<String> xpaths = new LinkedHashSet<>();
        for (WebElement currentElement : elements) {
            String elementText = currentElement.getAttribute("text");
            String elementID = currentElement.getAttribute("content-desc");

            if (elementID != null || (!elementText.equals("") && !StringUtils.containsAny(elementText, "<", ">"))) {
                String xpath = "//*[ ]";
                if (elementID != null) {
                    xpath = xpath.replace(" ", "@content-desc='" + elementID + "' ");
                    xpaths.add(xpath);
                    xpath = "//*[ ]";
                }
                if ((!elementText.equals("") && !StringUtils.containsAny(elementText, "<", ">"))) {
                    xpath = xpath.replace(" ", "@text='" + elementText + "' ");
                    xpaths.add(xpath);
                }
            }
        }
        return xpaths;
    }

}
